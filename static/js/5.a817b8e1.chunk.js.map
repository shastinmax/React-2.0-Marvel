{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","CSSTransition","in","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","console","log","decoration"],"mappings":"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","file":"static/js/5.a817b8e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage=()=>{\r\n    return(\r\n        <img style={{display:'block',width:'250px',height:'250px',objectFit:'contain',margin:'0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\nexport  default ErrorMessage","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error,clearError} = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d744a44799ab057e317cba56f8a2aed4';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n    const {loading, error, getCharacter,clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n            getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n            {content}\n            {spinner}\n            {errorMessage}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                        onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char\n    let imgStyle = {'objectFit': \"cover\"}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': \"contain\"}\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useEffect, useRef, useState} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport PropTypes from \"prop-types\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService()\n\n    useEffect(() => {\n        onRequest(offset,true)\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(false)\n        setOffset(offset => offset + 9)\n        setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit': 'unset'};\n            }\n\n            return (\n                <CSSTransition in={item.id} timeout={500} classNames=\"my-node\">\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useEffect, useState} from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport PropTypes from 'prop-types'\nimport useMarvelService from \"../../services/MarvelService\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport './charInfo.scss';\n\n\n\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n            return;\n        }\n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n    let imgStyle = {'objectFit': \"cover\"}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': \"contain\"}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character '}\n                {\n                    comics.map((item, i) => {\n                        return <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    })\n                }\n\n                <li className=\"char__comics-item\">\n                    All-Winners Squad: Band of Heroes (2011) #3\n                </li>\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\n\nexport default CharInfo;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error:false\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error===true){\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport {useState} from \"react\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\nconsole.log(typeof useState,'fj')\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\nexport default MainPage"],"sourceRoot":""}